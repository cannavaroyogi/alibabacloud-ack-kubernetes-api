/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class Addon extends $tea.Model {
    config?: string;
    disabled?: boolean;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DataDisk extends $tea.Model {
    autoSnapshotPolicyId?: string;
    category?: string;
    encrypted?: string;
    performanceLevel?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MaintenanceWindow extends $tea.Model {
    duration?: string;
    enable?: boolean;
    maintenanceTime?: string;
    weeklyPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class Runtime extends $tea.Model {
    name?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class Tag extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class Taint extends $tea.Model {
    effect?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StandardComponentsValue extends $tea.Model {
    name?: string;
    version?: string;
    description?: string;
    required?: string;
    disabled?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachInstancesRequest extends $tea.Model {
    cpuPolicy?: string;
    formatDisk?: boolean;
    imageId?: string;
    instances?: string[];
    isEdgeWorker?: boolean;
    keepInstanceName?: boolean;
    keyPair?: string;
    nodepoolId?: string;
    password?: string;
    rdsInstances?: string[];
    runtime?: Runtime;
    tags?: Tag[];
    userData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachInstancesResponseBody extends $tea.Model {
    list?: AttachInstancesResponseBodyList[];
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: AttachInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelClusterUpgradeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelComponentUpgradeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelWorkflowRequest extends $tea.Model {
    action?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelWorkflowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAutoscalingConfigRequest extends $tea.Model {
    coolDownDuration?: string;
    expander?: string;
    gpuUtilizationThreshold?: string;
    scaleDownEnabled?: boolean;
    scanInterval?: string;
    unneededDuration?: string;
    utilizationThreshold?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAutoscalingConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterRequest extends $tea.Model {
    addons?: Addon[];
    apiAudiences?: string;
    chargeType?: string;
    cisEnabled?: boolean;
    cloudMonitorFlags?: boolean;
    clusterDomain?: string;
    clusterSpec?: string;
    clusterType?: string;
    containerCidr?: string;
    controlplaneLogComponents?: string[];
    controlplaneLogProject?: string;
    controlplaneLogTtl?: string;
    cpuPolicy?: string;
    customSan?: string;
    deletionProtection?: boolean;
    disableRollback?: boolean;
    enableRrsa?: boolean;
    encryptionProviderKey?: string;
    endpointPublicAccess?: boolean;
    formatDisk?: boolean;
    imageId?: string;
    imageType?: string;
    instances?: string[];
    ipStack?: string;
    isEnterpriseSecurityGroup?: boolean;
    keepInstanceName?: boolean;
    keyPair?: string;
    kubernetesVersion?: string;
    loadBalancerSpec?: string;
    loggingType?: string;
    loginPassword?: string;
    masterAutoRenew?: boolean;
    masterAutoRenewPeriod?: number;
    masterCount?: number;
    masterInstanceChargeType?: string;
    masterInstanceTypes?: string[];
    masterPeriod?: number;
    masterPeriodUnit?: string;
    masterSystemDiskCategory?: string;
    masterSystemDiskPerformanceLevel?: string;
    masterSystemDiskSize?: number;
    masterSystemDiskSnapshotPolicyId?: string;
    masterVswitchIds?: string[];
    name?: string;
    natGateway?: boolean;
    nodeCidrMask?: string;
    nodeNameMode?: string;
    nodePortRange?: string;
    numOfNodes?: number;
    osType?: string;
    period?: number;
    periodUnit?: string;
    platform?: string;
    podVswitchIds?: string[];
    profile?: string;
    proxyMode?: string;
    rdsInstances?: string[];
    regionId?: string;
    resourceGroupId?: string;
    runtime?: Runtime;
    securityGroupId?: string;
    serviceAccountIssuer?: string;
    serviceCidr?: string;
    serviceDiscoveryTypes?: string[];
    snatEntry?: boolean;
    socEnabled?: boolean;
    sshFlags?: boolean;
    tags?: Tag[];
    taints?: Taint[];
    timeoutMins?: number;
    timezone?: string;
    userCa?: string;
    userData?: string;
    vpcid?: string;
    vswitchIds?: string[];
    workerAutoRenew?: boolean;
    workerAutoRenewPeriod?: number;
    workerDataDisks?: CreateClusterRequestWorkerDataDisks[];
    workerInstanceChargeType?: string;
    workerInstanceTypes?: string[];
    workerPeriod?: number;
    workerPeriodUnit?: string;
    workerSystemDiskCategory?: string;
    workerSystemDiskPerformanceLevel?: string;
    workerSystemDiskSize?: number;
    workerSystemDiskSnapshotPolicyId?: string;
    workerVswitchIds?: string[];
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterResponseBody extends $tea.Model {
    clusterId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequest extends $tea.Model {
    autoScaling?: CreateClusterNodePoolRequestAutoScaling;
    count?: number;
    interconnectConfig?: CreateClusterNodePoolRequestInterconnectConfig;
    interconnectMode?: string;
    kubernetesConfig?: CreateClusterNodePoolRequestKubernetesConfig;
    management?: CreateClusterNodePoolRequestManagement;
    maxNodes?: number;
    nodepoolInfo?: CreateClusterNodePoolRequestNodepoolInfo;
    scalingGroup?: CreateClusterNodePoolRequestScalingGroup;
    teeConfig?: CreateClusterNodePoolRequestTeeConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolResponseBody extends $tea.Model {
    nodepoolId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateClusterNodePoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeMachineRequest extends $tea.Model {
    hostname?: string;
    model?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeMachineResponseBody extends $tea.Model {
    edgeMachineId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEdgeMachineResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateEdgeMachineResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateKubernetesTriggerRequest extends $tea.Model {
    action?: string;
    clusterId?: string;
    projectId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateKubernetesTriggerResponseBody extends $tea.Model {
    action?: string;
    clusterId?: string;
    id?: string;
    projectId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateKubernetesTriggerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateKubernetesTriggerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTemplateRequest extends $tea.Model {
    description?: string;
    name?: string;
    tags?: string;
    template?: string;
    templateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTemplateResponseBody extends $tea.Model {
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerRequest extends $tea.Model {
    action?: string;
    clusterId?: string;
    projectId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerResponseBody extends $tea.Model {
    action?: string;
    clusterId?: string;
    id?: string;
    projectId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: CreateTriggerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertContactResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteAlertContactGroupResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterRequest extends $tea.Model {
    keepSlb?: boolean;
    retainAllResources?: boolean;
    retainResources?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterShrinkRequest extends $tea.Model {
    keepSlb?: boolean;
    retainAllResources?: boolean;
    retainResourcesShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterNodepoolRequest extends $tea.Model {
    force?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterNodepoolResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterNodepoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteClusterNodepoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterNodesRequest extends $tea.Model {
    drainNode?: boolean;
    nodes?: string[];
    releaseNode?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterNodesResponseBody extends $tea.Model {
    clusterId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteClusterNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeleteClusterNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeMachineRequest extends $tea.Model {
    force?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteEdgeMachineResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteKubernetesTriggerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePolicyInstanceRequest extends $tea.Model {
    instanceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePolicyInstanceResponseBody extends $tea.Model {
    instances?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePolicyInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeletePolicyInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTriggerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployPolicyInstanceRequest extends $tea.Model {
    action?: string;
    namespaces?: string[];
    parameters?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployPolicyInstanceResponseBody extends $tea.Model {
    instances?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeployPolicyInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DeployPolicyInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescirbeWorkflowResponseBody extends $tea.Model {
    createTime?: string;
    duration?: string;
    finishTime?: string;
    inputDataSize?: string;
    jobName?: string;
    jobNamespace?: string;
    outputDataSize?: string;
    status?: string;
    totalBases?: string;
    totalReads?: string;
    userInputData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescirbeWorkflowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescirbeWorkflowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAddonsRequest extends $tea.Model {
    clusterType?: string;
    region?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAddonsResponseBody extends $tea.Model {
    componentGroups?: DescribeAddonsResponseBodyComponentGroups[];
    standardComponents?: {
        [key: string]: StandardComponentsValue;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAddonsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeAddonsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAddonMetadataResponseBody extends $tea.Model {
    configSchema?: string;
    name?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAddonMetadataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterAddonMetadataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAddonUpgradeStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAddonsUpgradeStatusRequest extends $tea.Model {
    componentIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAddonsUpgradeStatusShrinkRequest extends $tea.Model {
    componentIdsShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAddonsUpgradeStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAddonsVersionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAttachScriptsRequest extends $tea.Model {
    arch?: string;
    formatDisk?: boolean;
    keepInstanceName?: boolean;
    nodepoolId?: string;
    options?: string;
    rdsInstances?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterAttachScriptsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterDetailResponseBody extends $tea.Model {
    clusterId?: string;
    clusterSpec?: string;
    clusterType?: string;
    created?: string;
    currentVersion?: string;
    deletionProtection?: boolean;
    dockerVersion?: string;
    externalLoadbalancerId?: string;
    initVersion?: string;
    maintenanceWindow?: MaintenanceWindow;
    masterUrl?: string;
    metaData?: string;
    name?: string;
    networkMode?: string;
    nextVersion?: string;
    privateZone?: boolean;
    profile?: string;
    regionId?: string;
    resourceGroupId?: string;
    securityGroupId?: string;
    size?: number;
    state?: string;
    subnetCidr?: string;
    tags?: Tag[];
    updated?: string;
    vpcId?: string;
    vswitchId?: string;
    workerRamRoleName?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterEventsRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterEventsResponseBody extends $tea.Model {
    events?: DescribeClusterEventsResponseBodyEvents[];
    pageInfo?: DescribeClusterEventsResponseBodyPageInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterLogsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterLogsResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBody extends $tea.Model {
    autoScaling?: DescribeClusterNodePoolDetailResponseBodyAutoScaling;
    interconnectConfig?: DescribeClusterNodePoolDetailResponseBodyInterconnectConfig;
    interconnectMode?: string;
    kubernetesConfig?: DescribeClusterNodePoolDetailResponseBodyKubernetesConfig;
    management?: DescribeClusterNodePoolDetailResponseBodyManagement;
    maxNodes?: number;
    nodepoolInfo?: DescribeClusterNodePoolDetailResponseBodyNodepoolInfo;
    scalingGroup?: DescribeClusterNodePoolDetailResponseBodyScalingGroup;
    status?: DescribeClusterNodePoolDetailResponseBodyStatus;
    teeConfig?: DescribeClusterNodePoolDetailResponseBodyTeeConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterNodePoolDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBody extends $tea.Model {
    nodepools?: DescribeClusterNodePoolsResponseBodyNodepools[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterNodePoolsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodesRequest extends $tea.Model {
    instanceIds?: string;
    nodepoolId?: string;
    pageNumber?: string;
    pageSize?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodesResponseBody extends $tea.Model {
    nodes?: DescribeClusterNodesResponseBodyNodes[];
    page?: DescribeClusterNodesResponseBodyPage;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterResourcesResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterTasksResponseBody extends $tea.Model {
    pageInfo?: DescribeClusterTasksResponseBodyPageInfo;
    requestId?: string;
    tasks?: DescribeClusterTasksResponseBodyTasks[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterTasksResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterTasksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterUserKubeconfigRequest extends $tea.Model {
    privateIpAddress?: boolean;
    temporaryDurationMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterUserKubeconfigResponseBody extends $tea.Model {
    config?: string;
    expiration?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterUserKubeconfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterUserKubeconfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterV2UserKubeconfigRequest extends $tea.Model {
    privateIpAddress?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterV2UserKubeconfigResponseBody extends $tea.Model {
    config?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterV2UserKubeconfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClusterV2UserKubeconfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersRequest extends $tea.Model {
    clusterType?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClustersResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersV1Request extends $tea.Model {
    clusterSpec?: string;
    clusterType?: string;
    name?: string;
    pageNumber?: number;
    pageSize?: number;
    profile?: string;
    regionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersV1ResponseBody extends $tea.Model {
    clusters?: DescribeClustersV1ResponseBodyClusters[];
    pageInfo?: DescribeClustersV1ResponseBodyPageInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersV1Response extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeClustersV1ResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachineActiveProcessResponseBody extends $tea.Model {
    logs?: string;
    progress?: number;
    requestId?: string;
    state?: string;
    step?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachineActiveProcessResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeEdgeMachineActiveProcessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachineModelsResponseBody extends $tea.Model {
    models?: DescribeEdgeMachineModelsResponseBodyModels[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachineModelsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeEdgeMachineModelsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachineTunnelConfigDetailResponseBody extends $tea.Model {
    deviceName?: string;
    model?: string;
    productKey?: string;
    requestId?: string;
    sn?: string;
    token?: string;
    tunnelEndpoint?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachineTunnelConfigDetailResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeEdgeMachineTunnelConfigDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachinesRequest extends $tea.Model {
    hostname?: string;
    lifeState?: string;
    model?: string;
    onlineState?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachinesResponseBody extends $tea.Model {
    edgeMachines?: DescribeEdgeMachinesResponseBodyEdgeMachines[];
    pageInfo?: DescribeEdgeMachinesResponseBodyPageInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachinesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeEdgeMachinesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsRequest extends $tea.Model {
    clusterId?: string;
    pageNumber?: number;
    pageSize?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponseBody extends $tea.Model {
    events?: DescribeEventsResponseBodyEvents[];
    pageInfo?: DescribeEventsResponseBodyPageInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeExternalAgentRequest extends $tea.Model {
    privateIpAddress?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeExternalAgentResponseBody extends $tea.Model {
    config?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeExternalAgentResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeExternalAgentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeKubernetesVersionMetadataRequest extends $tea.Model {
    clusterType?: string;
    kubernetesVersion?: string;
    profile?: string;
    region?: string;
    runtime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeKubernetesVersionMetadataResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeKubernetesVersionMetadataResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeNodePoolVulsResponseBody extends $tea.Model {
    vulRecords?: DescribeNodePoolVulsResponseBodyVulRecords[];
    vulsFixServicePurchased?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeNodePoolVulsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeNodePoolVulsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePoliciesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyDetailsResponseBody extends $tea.Model {
    action?: string;
    category?: string;
    description?: string;
    isDeleted?: number;
    name?: string;
    noConfig?: number;
    severity?: string;
    template?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyDetailsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePolicyDetailsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBody extends $tea.Model {
    admitLog?: DescribePolicyGovernanceInClusterResponseBodyAdmitLog;
    onState?: DescribePolicyGovernanceInClusterResponseBodyOnState[];
    totalViolations?: DescribePolicyGovernanceInClusterResponseBodyTotalViolations;
    violations?: DescribePolicyGovernanceInClusterResponseBodyViolations;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePolicyGovernanceInClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesRequest extends $tea.Model {
    instanceName?: string;
    policyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePolicyInstancesResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponseBody extends $tea.Model {
    instancesSeverityCount?: {
        [key: string]: any;
    };
    policyInstances?: DescribePolicyInstancesStatusResponseBodyPolicyInstances[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribePolicyInstancesStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTaskInfoResponseBody extends $tea.Model {
    clusterId?: string;
    created?: string;
    currentStage?: string;
    error?: DescribeTaskInfoResponseBodyError;
    events?: DescribeTaskInfoResponseBodyEvents[];
    parameters?: {
        [key: string]: any;
    };
    stages?: DescribeTaskInfoResponseBodyStages[];
    state?: string;
    target?: DescribeTaskInfoResponseBodyTarget;
    taskId?: string;
    taskResult?: DescribeTaskInfoResponseBodyTaskResult[];
    taskType?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTaskInfoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeTaskInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTemplateAttributeRequest extends $tea.Model {
    templateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTemplateAttributeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeTemplateAttributeResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTemplatesRequest extends $tea.Model {
    pageNum?: number;
    pageSize?: number;
    templateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTemplatesResponseBody extends $tea.Model {
    pageInfo?: DescribeTemplatesResponseBodyPageInfo;
    templates?: DescribeTemplatesResponseBodyTemplates[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTemplatesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTriggerRequest extends $tea.Model {
    name?: string;
    namespace?: string;
    type?: string;
    action?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTriggerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeTriggerResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserPermissionResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeUserPermissionResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserQuotaResponseBody extends $tea.Model {
    amkClusterQuota?: number;
    askClusterQuota?: number;
    clusterNodepoolQuota?: number;
    clusterQuota?: number;
    edgeImprovedNodepoolQuota?: DescribeUserQuotaResponseBodyEdgeImprovedNodepoolQuota;
    nodeQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserQuotaResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeUserQuotaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWorkflowsResponseBody extends $tea.Model {
    jobs?: DescribeWorkflowsResponseBodyJobs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWorkflowsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DescribeWorkflowsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EdgeClusterAddEdgeMachineRequest extends $tea.Model {
    expired?: number;
    nodepoolId?: string;
    options?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EdgeClusterAddEdgeMachineResponseBody extends $tea.Model {
    edgeMachineId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EdgeClusterAddEdgeMachineResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EdgeClusterAddEdgeMachineResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FixNodePoolVulsRequest extends $tea.Model {
    nodes?: string[];
    rolloutPolicy?: FixNodePoolVulsRequestRolloutPolicy;
    vulList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FixNodePoolVulsResponseBody extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FixNodePoolVulsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: FixNodePoolVulsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKubernetesTriggerRequest extends $tea.Model {
    name?: string;
    namespace?: string;
    type?: string;
    action?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKubernetesTriggerResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetKubernetesTriggerResponseBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUpgradeStatusResponseBody extends $tea.Model {
    errorMessage?: string;
    precheckReportId?: string;
    status?: string;
    upgradeStep?: string;
    upgradeTask?: GetUpgradeStatusResponseBodyUpgradeTask;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUpgradeStatusResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetUpgradeStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantPermissionsRequest extends $tea.Model {
    body?: GrantPermissionsRequestBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantPermissionsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallClusterAddonsRequest extends $tea.Model {
    body?: InstallClusterAddonsRequestBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallClusterAddonsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesRequest extends $tea.Model {
    nextToken?: string;
    regionId?: string;
    resourceIds?: string[];
    resourceType?: string;
    tags?: Tag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesShrinkRequest extends $tea.Model {
    nextToken?: string;
    regionId?: string;
    resourceIdsShrink?: string;
    resourceType?: string;
    tagsShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBody extends $tea.Model {
    nextToken?: string;
    requestId?: string;
    tagResources?: ListTagResourcesResponseBodyTagResources;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ListTagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateClusterRequest extends $tea.Model {
    ossBucketEndpoint?: string;
    ossBucketName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateClusterResponseBody extends $tea.Model {
    clusterId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MigrateClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: MigrateClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterRequest extends $tea.Model {
    apiServerEip?: boolean;
    apiServerEipId?: string;
    deletionProtection?: boolean;
    enableRrsa?: boolean;
    ingressDomainRebinding?: string;
    ingressLoadbalancerId?: string;
    instanceDeletionProtection?: boolean;
    maintenanceWindow?: MaintenanceWindow;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterResponseBody extends $tea.Model {
    clusterId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterAddonRequest extends $tea.Model {
    config?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterAddonResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterConfigurationRequest extends $tea.Model {
    customizeConfig?: ModifyClusterConfigurationRequestCustomizeConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterConfigurationResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequest extends $tea.Model {
    autoScaling?: ModifyClusterNodePoolRequestAutoScaling;
    kubernetesConfig?: ModifyClusterNodePoolRequestKubernetesConfig;
    management?: ModifyClusterNodePoolRequestManagement;
    nodepoolInfo?: ModifyClusterNodePoolRequestNodepoolInfo;
    scalingGroup?: ModifyClusterNodePoolRequestScalingGroup;
    teeConfig?: ModifyClusterNodePoolRequestTeeConfig;
    updateNodes?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolResponseBody extends $tea.Model {
    nodepoolId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyClusterNodePoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterTagsRequest extends $tea.Model {
    body?: Tag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterTagsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyNodePoolNodeConfigRequest extends $tea.Model {
    kubeletConfig?: ModifyNodePoolNodeConfigRequestKubeletConfig;
    rollingPolicy?: ModifyNodePoolNodeConfigRequestRollingPolicy;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyNodePoolNodeConfigResponseBody extends $tea.Model {
    nodepoolId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyNodePoolNodeConfigResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyNodePoolNodeConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPolicyInstanceRequest extends $tea.Model {
    action?: string;
    instanceName?: string;
    namespaces?: string[];
    parameters?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPolicyInstanceResponseBody extends $tea.Model {
    instances?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyPolicyInstanceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ModifyPolicyInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenAckServiceRequest extends $tea.Model {
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenAckServiceResponseBody extends $tea.Model {
    orderId?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OpenAckServiceResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: OpenAckServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PauseClusterUpgradeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PauseComponentUpgradeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PauseTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveClusterNodesRequest extends $tea.Model {
    drainNode?: boolean;
    nodes?: string[];
    releaseNode?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveClusterNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveNodePoolNodesRequest extends $tea.Model {
    drainNode?: boolean;
    nodes?: string[];
    releaseNode?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveNodePoolNodesShrinkRequest extends $tea.Model {
    drainNode?: boolean;
    nodesShrink?: string;
    releaseNode?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveNodePoolNodesResponseBody extends $tea.Model {
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveNodePoolNodesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RemoveNodePoolNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveWorkflowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RepairClusterNodePoolRequest extends $tea.Model {
    nodes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RepairClusterNodePoolResponseBody extends $tea.Model {
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RepairClusterNodePoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RepairClusterNodePoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResumeComponentUpgradeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResumeTaskResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResumeUpgradeClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterRequest extends $tea.Model {
    cloudMonitorFlags?: boolean;
    count?: number;
    cpuPolicy?: string;
    disableRollback?: boolean;
    keyPair?: string;
    loginPassword?: string;
    tags?: ScaleClusterRequestTags[];
    taints?: ScaleClusterRequestTaints[];
    vswitchIds?: string[];
    workerAutoRenew?: boolean;
    workerAutoRenewPeriod?: number;
    workerDataDisk?: boolean;
    workerDataDisks?: ScaleClusterRequestWorkerDataDisks[];
    workerInstanceChargeType?: string;
    workerInstanceTypes?: string[];
    workerPeriod?: number;
    workerPeriodUnit?: string;
    workerSystemDiskCategory?: string;
    workerSystemDiskSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterResponseBody extends $tea.Model {
    clusterId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ScaleClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterNodePoolRequest extends $tea.Model {
    count?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterNodePoolResponseBody extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterNodePoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ScaleClusterNodePoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleOutClusterRequest extends $tea.Model {
    cloudMonitorFlags?: boolean;
    count?: number;
    cpuPolicy?: string;
    imageId?: string;
    keyPair?: string;
    loginPassword?: string;
    rdsInstances?: string[];
    runtime?: Runtime;
    tags?: Tag[];
    taints?: Taint[];
    userData?: string;
    vswitchIds?: string[];
    workerAutoRenew?: boolean;
    workerAutoRenewPeriod?: number;
    workerDataDisks?: ScaleOutClusterRequestWorkerDataDisks[];
    workerInstanceChargeType?: string;
    workerInstanceTypes?: string[];
    workerPeriod?: number;
    workerPeriodUnit?: string;
    workerSystemDiskCategory?: string;
    workerSystemDiskSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleOutClusterResponseBody extends $tea.Model {
    clusterId?: string;
    requestId?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleOutClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ScaleOutClusterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartWorkflowRequest extends $tea.Model {
    mappingBamOutFilename?: string;
    mappingBamOutPath?: string;
    mappingBucketName?: string;
    mappingFastqFirstFilename?: string;
    mappingFastqPath?: string;
    mappingFastqSecondFilename?: string;
    mappingIsMarkDup?: string;
    mappingOssRegion?: string;
    mappingReferencePath?: string;
    service?: string;
    wgsBucketName?: string;
    wgsFastqFirstFilename?: string;
    wgsFastqPath?: string;
    wgsFastqSecondFilename?: string;
    wgsOssRegion?: string;
    wgsReferencePath?: string;
    wgsVcfOutFilename?: string;
    wgsVcfOutPath?: string;
    workflowType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartWorkflowResponseBody extends $tea.Model {
    jobName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartWorkflowResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: StartWorkflowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesRequest extends $tea.Model {
    regionId?: string;
    resourceIds?: string[];
    resourceType?: string;
    tags?: Tag[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnInstallClusterAddonsRequest extends $tea.Model {
    addons?: UnInstallClusterAddonsRequestAddons[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnInstallClusterAddonsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesRequest extends $tea.Model {
    all?: boolean;
    regionId?: string;
    resourceIds?: string[];
    resourceType?: string;
    tagKeys?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UntagResourcesResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UntagResourcesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateContactGroupForAlertResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateK8sClusterUserConfigExpireRequest extends $tea.Model {
    expireHour?: number;
    user?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateK8sClusterUserConfigExpireResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTemplateRequest extends $tea.Model {
    description?: string;
    name?: string;
    tags?: string;
    template?: string;
    templateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTemplateResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeClusterRequest extends $tea.Model {
    componentName?: string;
    nextVersion?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeClusterResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeClusterAddonsRequest extends $tea.Model {
    body?: UpgradeClusterAddonsRequestBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeClusterAddonsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeClusterNodepoolRequest extends $tea.Model {
    imageId?: string;
    kubernetesVersion?: string;
    runtimeVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeClusterNodepoolResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeClusterNodepoolResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: UpgradeClusterNodepoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttachInstancesResponseBodyList extends $tea.Model {
    code?: string;
    instanceId?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterRequestWorkerDataDisks extends $tea.Model {
    category?: string;
    encrypted?: string;
    performanceLevel?: string;
    size?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestAutoScaling extends $tea.Model {
    eipBandwidth?: number;
    eipInternetChargeType?: string;
    enable?: boolean;
    isBondEip?: boolean;
    maxInstances?: number;
    minInstances?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestInterconnectConfig extends $tea.Model {
    bandwidth?: number;
    ccnId?: string;
    ccnRegionId?: string;
    cenId?: string;
    improvedPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestKubernetesConfig extends $tea.Model {
    cmsEnabled?: boolean;
    cpuPolicy?: string;
    labels?: Tag[];
    nodeNameMode?: string;
    runtime?: string;
    runtimeVersion?: string;
    taints?: Taint[];
    userData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestManagementUpgradeConfig extends $tea.Model {
    autoUpgrade?: boolean;
    maxUnavailable?: number;
    surge?: number;
    surgePercentage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestManagement extends $tea.Model {
    autoRepair?: boolean;
    enable?: boolean;
    upgradeConfig?: CreateClusterNodePoolRequestManagementUpgradeConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestNodepoolInfo extends $tea.Model {
    name?: string;
    resourceGroupId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestScalingGroupSpotPriceLimit extends $tea.Model {
    instanceType?: string;
    priceLimit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestScalingGroupTags extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestScalingGroup extends $tea.Model {
    autoRenew?: boolean;
    autoRenewPeriod?: number;
    compensateWithOnDemand?: boolean;
    dataDisks?: DataDisk[];
    deploymentsetId?: string;
    desiredSize?: number;
    imageId?: string;
    imageType?: string;
    instanceChargeType?: string;
    instanceTypes?: string[];
    internetChargeType?: string;
    internetMaxBandwidthOut?: number;
    keyPair?: string;
    loginPassword?: string;
    multiAzPolicy?: string;
    onDemandBaseCapacity?: number;
    onDemandPercentageAboveBaseCapacity?: number;
    period?: number;
    periodUnit?: string;
    platform?: string;
    rdsInstances?: string[];
    scalingPolicy?: string;
    securityGroupId?: string;
    securityGroupIds?: string[];
    spotInstancePools?: number;
    spotInstanceRemedy?: boolean;
    spotPriceLimit?: CreateClusterNodePoolRequestScalingGroupSpotPriceLimit[];
    spotStrategy?: string;
    systemDiskCategory?: string;
    systemDiskPerformanceLevel?: string;
    systemDiskSize?: number;
    tags?: CreateClusterNodePoolRequestScalingGroupTags[];
    vswitchIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateClusterNodePoolRequestTeeConfig extends $tea.Model {
    teeEnable?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAddonsResponseBodyComponentGroupsItems extends $tea.Model {
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeAddonsResponseBodyComponentGroups extends $tea.Model {
    groupName?: string;
    items?: DescribeAddonsResponseBodyComponentGroupsItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterEventsResponseBodyEventsData extends $tea.Model {
    level?: string;
    message?: string;
    reason?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterEventsResponseBodyEvents extends $tea.Model {
    clusterId?: string;
    data?: DescribeClusterEventsResponseBodyEventsData;
    eventId?: string;
    source?: string;
    subject?: string;
    time?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterEventsResponseBodyPageInfo extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterLogsResponseBody extends $tea.Model {
    ID?: number;
    clusterId?: string;
    clusterLog?: string;
    created?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyAutoScaling extends $tea.Model {
    eipBandwidth?: number;
    eipInternetChargeType?: string;
    enable?: boolean;
    isBondEip?: boolean;
    maxInstances?: number;
    minInstances?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyInterconnectConfig extends $tea.Model {
    bandwidth?: number;
    ccnId?: string;
    ccnRegionId?: string;
    cenId?: string;
    improvedPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyKubernetesConfig extends $tea.Model {
    cmsEnabled?: boolean;
    cpuPolicy?: string;
    labels?: Tag[];
    nodeNameMode?: string;
    runtime?: string;
    runtimeVersion?: string;
    taints?: Taint[];
    userData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyManagementUpgradeConfig extends $tea.Model {
    autoUpgrade?: boolean;
    maxUnavailable?: number;
    surge?: number;
    surgePercentage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyManagement extends $tea.Model {
    autoRepair?: boolean;
    enable?: boolean;
    upgradeConfig?: DescribeClusterNodePoolDetailResponseBodyManagementUpgradeConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyNodepoolInfo extends $tea.Model {
    created?: string;
    isDefault?: boolean;
    name?: string;
    nodepoolId?: string;
    regionId?: string;
    resourceGroupId?: string;
    type?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyScalingGroupSpotPriceLimit extends $tea.Model {
    instanceType?: string;
    priceLimit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyScalingGroup extends $tea.Model {
    autoRenew?: boolean;
    autoRenewPeriod?: number;
    compensateWithOnDemand?: boolean;
    dataDisks?: DataDisk[];
    deploymentsetId?: string;
    desiredSize?: number;
    imageId?: string;
    instanceChargeType?: string;
    instanceTypes?: string[];
    internetChargeType?: string;
    internetMaxBandwidthOut?: number;
    keyPair?: string;
    loginPassword?: string;
    multiAzPolicy?: string;
    onDemandBaseCapacity?: number;
    onDemandPercentageAboveBaseCapacity?: number;
    period?: number;
    periodUnit?: string;
    platform?: string;
    ramPolicy?: string;
    rdsInstances?: string[];
    scalingGroupId?: string;
    scalingPolicy?: string;
    securityGroupId?: string;
    securityGroupIds?: string[];
    spotInstancePools?: number;
    spotInstanceRemedy?: boolean;
    spotPriceLimit?: DescribeClusterNodePoolDetailResponseBodyScalingGroupSpotPriceLimit[];
    spotStrategy?: string;
    systemDiskCategory?: string;
    systemDiskPerformanceLevel?: string;
    systemDiskSize?: number;
    tags?: Tag[];
    vswitchIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyStatus extends $tea.Model {
    failedNodes?: number;
    healthyNodes?: number;
    initialNodes?: number;
    offlineNodes?: number;
    removingNodes?: number;
    servingNodes?: number;
    state?: string;
    totalNodes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolDetailResponseBodyTeeConfig extends $tea.Model {
    teeEnable?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsAutoScaling extends $tea.Model {
    eipBandwidth?: number;
    eipInternetChargeType?: string;
    enable?: boolean;
    isBondEip?: boolean;
    maxInstances?: number;
    minInstances?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsInterconnectConfig extends $tea.Model {
    bandwidth?: number;
    ccnId?: string;
    ccnRegionId?: string;
    cenId?: string;
    improvedPeriod?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsKubernetesConfig extends $tea.Model {
    cmsEnabled?: boolean;
    cpuPolicy?: string;
    labels?: Tag[];
    nodeNameMode?: string;
    runtime?: string;
    runtimeVersion?: string;
    taints?: Taint[];
    userData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsManagementUpgradeConfig extends $tea.Model {
    autoUpgrade?: boolean;
    maxUnavailable?: number;
    surge?: number;
    surgePercentage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsManagement extends $tea.Model {
    autoRepair?: boolean;
    enable?: boolean;
    upgradeConfig?: DescribeClusterNodePoolsResponseBodyNodepoolsManagementUpgradeConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsNodepoolInfo extends $tea.Model {
    created?: string;
    isDefault?: boolean;
    name?: string;
    nodepoolId?: string;
    regionId?: string;
    resourceGroupId?: string;
    type?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsScalingGroupSpotPriceLimit extends $tea.Model {
    instanceType?: string;
    priceLimit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsScalingGroup extends $tea.Model {
    autoRenew?: boolean;
    autoRenewPeriod?: number;
    compensateWithOnDemand?: boolean;
    dataDisks?: DataDisk[];
    deploymentsetId?: string;
    desiredSize?: number;
    imageId?: string;
    instanceChargeType?: string;
    instanceTypes?: string[];
    internetChargeType?: string;
    internetMaxBandwidthOut?: number;
    keyPair?: string;
    loginPassword?: string;
    multiAzPolicy?: string;
    onDemandBaseCapacity?: number;
    onDemandPercentageAboveBaseCapacity?: number;
    period?: number;
    periodUnit?: string;
    platform?: string;
    ramPolicy?: string;
    rdsInstances?: string[];
    scalingGroupId?: string;
    scalingPolicy?: string;
    securityGroupId?: string;
    securityGroupIds?: string[];
    spotInstancePools?: number;
    spotInstanceRemedy?: boolean;
    spotPriceLimit?: DescribeClusterNodePoolsResponseBodyNodepoolsScalingGroupSpotPriceLimit[];
    spotStrategy?: string;
    systemDiskCategory?: string;
    systemDiskPerformanceLevel?: string;
    systemDiskSize?: number;
    tags?: Tag[];
    vswitchIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsStatus extends $tea.Model {
    failedNodes?: number;
    healthyNodes?: number;
    initialNodes?: number;
    offlineNodes?: number;
    removingNodes?: number;
    servingNodes?: number;
    state?: string;
    totalNodes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepoolsTeeConfig extends $tea.Model {
    teeEnable?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodePoolsResponseBodyNodepools extends $tea.Model {
    autoScaling?: DescribeClusterNodePoolsResponseBodyNodepoolsAutoScaling;
    interconnectConfig?: DescribeClusterNodePoolsResponseBodyNodepoolsInterconnectConfig;
    interconnectMode?: string;
    kubernetesConfig?: DescribeClusterNodePoolsResponseBodyNodepoolsKubernetesConfig;
    management?: DescribeClusterNodePoolsResponseBodyNodepoolsManagement;
    maxNodes?: number;
    nodepoolInfo?: DescribeClusterNodePoolsResponseBodyNodepoolsNodepoolInfo;
    scalingGroup?: DescribeClusterNodePoolsResponseBodyNodepoolsScalingGroup;
    status?: DescribeClusterNodePoolsResponseBodyNodepoolsStatus;
    teeConfig?: DescribeClusterNodePoolsResponseBodyNodepoolsTeeConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodesResponseBodyNodes extends $tea.Model {
    creationTime?: string;
    errorMessage?: string;
    expiredTime?: string;
    hostName?: string;
    imageId?: string;
    instanceChargeType?: string;
    instanceId?: string;
    instanceName?: string;
    instanceRole?: string;
    instanceStatus?: string;
    instanceType?: string;
    instanceTypeFamily?: string;
    ipAddress?: string[];
    isAliyunNode?: boolean;
    nodeName?: string;
    nodeStatus?: string;
    nodepoolId?: string;
    source?: string;
    spotStrategy?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterNodesResponseBodyPage extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterResourcesResponseBody extends $tea.Model {
    clusterId?: string;
    created?: string;
    instanceId?: string;
    resourceInfo?: string;
    resourceType?: string;
    state?: string;
    autoCreate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterTasksResponseBodyPageInfo extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterTasksResponseBodyTasksError extends $tea.Model {
    code?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClusterTasksResponseBodyTasks extends $tea.Model {
    created?: string;
    error?: DescribeClusterTasksResponseBodyTasksError;
    state?: string;
    taskId?: string;
    taskType?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersResponseBodyTags extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersResponseBody extends $tea.Model {
    clusterId?: string;
    clusterType?: string;
    created?: string;
    currentVersion?: string;
    dataDiskCategory?: string;
    dataDiskSize?: number;
    deletionProtection?: boolean;
    dockerVersion?: string;
    externalLoadbalancerId?: string;
    initVersion?: string;
    masterUrl?: string;
    metaData?: string;
    name?: string;
    networkMode?: string;
    privateZone?: boolean;
    profile?: string;
    regionId?: string;
    resourceGroupId?: string;
    securityGroupId?: string;
    size?: number;
    state?: string;
    subnetCidr?: string;
    tags?: DescribeClustersResponseBodyTags[];
    updated?: string;
    vpcId?: string;
    vswitchCidr?: string;
    vswitchId?: string;
    workerRamRoleName?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersV1ResponseBodyClusters extends $tea.Model {
    clusterId?: string;
    clusterSpec?: string;
    clusterType?: string;
    created?: string;
    currentVersion?: string;
    deletionProtection?: boolean;
    dockerVersion?: string;
    externalLoadbalancerId?: string;
    initVersion?: string;
    maintenanceWindow?: MaintenanceWindow;
    masterUrl?: string;
    metaData?: string;
    name?: string;
    networkMode?: string;
    nextVersion?: string;
    privateZone?: boolean;
    profile?: string;
    regionId?: string;
    resourceGroupId?: string;
    securityGroupId?: string;
    size?: number;
    state?: string;
    subnetCidr?: string;
    tags?: Tag[];
    updated?: string;
    vpcId?: string;
    vswitchId?: string;
    workerRamRoleName?: string;
    zoneId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeClustersV1ResponseBodyPageInfo extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachineModelsResponseBodyModels extends $tea.Model {
    cpu?: number;
    cpuArch?: string;
    created?: string;
    description?: string;
    manageRuntime?: number;
    memory?: number;
    model?: string;
    modelId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachinesResponseBodyEdgeMachines extends $tea.Model {
    activeTime?: string;
    created?: string;
    edgeMachineId?: string;
    hostname?: string;
    lifeState?: string;
    model?: string;
    name?: string;
    onlineState?: string;
    sn?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEdgeMachinesResponseBodyPageInfo extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponseBodyEventsData extends $tea.Model {
    level?: string;
    message?: string;
    reason?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponseBodyEvents extends $tea.Model {
    clusterId?: string;
    data?: DescribeEventsResponseBodyEventsData;
    eventId?: string;
    source?: string;
    subject?: string;
    time?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeEventsResponseBodyPageInfo extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeKubernetesVersionMetadataResponseBodyImages extends $tea.Model {
    imageId?: string;
    imageName?: string;
    platform?: string;
    osVersion?: string;
    imageType?: string;
    osType?: string;
    imageCategory?: string;
    architecture?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeKubernetesVersionMetadataResponseBody extends $tea.Model {
    capabilities?: {
        [key: string]: any;
    };
    images?: DescribeKubernetesVersionMetadataResponseBodyImages[];
    metaData?: {
        [key: string]: any;
    };
    runtimes?: Runtime[];
    version?: string;
    multiAz?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeNodePoolVulsResponseBodyVulRecordsVulList extends $tea.Model {
    aliasName?: string;
    cveList?: string[];
    name?: string;
    necessity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeNodePoolVulsResponseBodyVulRecords extends $tea.Model {
    instanceId?: string;
    vulList?: DescribeNodePoolVulsResponseBodyVulRecordsVulList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyAdmitLogLog extends $tea.Model {
    clusterId?: string;
    constraintKind?: string;
    msg?: string;
    resourceKind?: string;
    resourceName?: string;
    resourceNamespace?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyAdmitLog extends $tea.Model {
    count?: number;
    log?: DescribePolicyGovernanceInClusterResponseBodyAdmitLogLog;
    progress?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyOnState extends $tea.Model {
    enabledCount?: number;
    severity?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyTotalViolationsDeny extends $tea.Model {
    severity?: string;
    violations?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyTotalViolationsWarn extends $tea.Model {
    severity?: string;
    violations?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyTotalViolations extends $tea.Model {
    deny?: DescribePolicyGovernanceInClusterResponseBodyTotalViolationsDeny;
    warn?: DescribePolicyGovernanceInClusterResponseBodyTotalViolationsWarn;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyViolationsDeny extends $tea.Model {
    policyDescription?: string;
    policyName?: string;
    severity?: string;
    violations?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyViolationsWarn extends $tea.Model {
    policyDescription?: string;
    policyName?: string;
    severity?: string;
    violations?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyGovernanceInClusterResponseBodyViolations extends $tea.Model {
    deny?: DescribePolicyGovernanceInClusterResponseBodyViolationsDeny;
    warn?: DescribePolicyGovernanceInClusterResponseBodyViolationsWarn;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesResponseBody extends $tea.Model {
    aliUid?: string;
    clusterId?: string;
    instanceName?: string;
    policyName?: string;
    policyCategory?: string;
    policyDescription?: string;
    policyParameters?: string;
    policySeverity?: string;
    policyScope?: string;
    policyAction?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribePolicyInstancesStatusResponseBodyPolicyInstances extends $tea.Model {
    policyCategory?: string;
    policyDescription?: string;
    policyInstancesCount?: number;
    policyName?: string;
    policySeverity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTaskInfoResponseBodyError extends $tea.Model {
    code?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTaskInfoResponseBodyEvents extends $tea.Model {
    action?: string;
    level?: string;
    message?: string;
    reason?: string;
    source?: string;
    timestamp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTaskInfoResponseBodyStages extends $tea.Model {
    endTime?: string;
    message?: string;
    outputs?: {
        [key: string]: any;
    };
    startTime?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTaskInfoResponseBodyTarget extends $tea.Model {
    id?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTaskInfoResponseBodyTaskResult extends $tea.Model {
    data?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTemplateAttributeResponseBody extends $tea.Model {
    id?: string;
    acl?: string;
    name?: string;
    template?: string;
    templateType?: string;
    description?: string;
    tags?: string;
    templateWithHistId?: string;
    created?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTemplatesResponseBodyPageInfo extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTemplatesResponseBodyTemplates extends $tea.Model {
    acl?: string;
    created?: string;
    description?: string;
    id?: string;
    name?: string;
    tags?: string;
    template?: string;
    templateType?: string;
    templateWithHistId?: string;
    updated?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeTriggerResponseBody extends $tea.Model {
    id?: string;
    name?: string;
    clusterId?: string;
    projectId?: string;
    type?: string;
    action?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserPermissionResponseBody extends $tea.Model {
    resourceId?: string;
    resourceType?: string;
    roleName?: string;
    roleType?: string;
    isOwner?: number;
    isRamRole?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeUserQuotaResponseBodyEdgeImprovedNodepoolQuota extends $tea.Model {
    bandwidth?: number;
    count?: number;
    period?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeWorkflowsResponseBodyJobs extends $tea.Model {
    clusterId?: string;
    createTime?: string;
    jobName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FixNodePoolVulsRequestRolloutPolicy extends $tea.Model {
    maxParallelism?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetKubernetesTriggerResponseBody extends $tea.Model {
    id?: string;
    name?: string;
    clusterId?: string;
    projectId?: string;
    type?: string;
    action?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUpgradeStatusResponseBodyUpgradeTask extends $tea.Model {
    message?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GrantPermissionsRequestBody extends $tea.Model {
    cluster?: string;
    isCustom?: boolean;
    isRamRole?: boolean;
    namespace?: string;
    roleName?: string;
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallClusterAddonsRequestBody extends $tea.Model {
    config?: string;
    name?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResourcesTagResource extends $tea.Model {
    resourceId?: string;
    resourceType?: string;
    tagKey?: string;
    tagValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTagResourcesResponseBodyTagResources extends $tea.Model {
    tagResource?: ListTagResourcesResponseBodyTagResourcesTagResource[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterConfigurationRequestCustomizeConfigConfigs extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterConfigurationRequestCustomizeConfig extends $tea.Model {
    configs?: ModifyClusterConfigurationRequestCustomizeConfigConfigs[];
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequestAutoScaling extends $tea.Model {
    eipBandwidth?: number;
    eipInternetChargeType?: string;
    enable?: boolean;
    isBondEip?: boolean;
    maxInstances?: number;
    minInstances?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequestKubernetesConfig extends $tea.Model {
    cmsEnabled?: boolean;
    cpuPolicy?: string;
    labels?: Tag[];
    runtime?: string;
    runtimeVersion?: string;
    taints?: Taint[];
    userData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequestManagementUpgradeConfig extends $tea.Model {
    autoUpgrade?: boolean;
    maxUnavailable?: number;
    surge?: number;
    surgePercentage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequestManagement extends $tea.Model {
    autoRepair?: boolean;
    enable?: boolean;
    upgradeConfig?: ModifyClusterNodePoolRequestManagementUpgradeConfig;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequestNodepoolInfo extends $tea.Model {
    name?: string;
    resourceGroupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequestScalingGroupSpotPriceLimit extends $tea.Model {
    instanceType?: string;
    priceLimit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequestScalingGroup extends $tea.Model {
    autoRenew?: boolean;
    autoRenewPeriod?: number;
    compensateWithOnDemand?: boolean;
    dataDisks?: DataDisk[];
    desiredSize?: number;
    imageId?: string;
    instanceChargeType?: string;
    instanceTypes?: string[];
    internetChargeType?: string;
    internetMaxBandwidthOut?: number;
    keyPair?: string;
    loginPassword?: string;
    multiAzPolicy?: string;
    onDemandBaseCapacity?: number;
    onDemandPercentageAboveBaseCapacity?: number;
    period?: number;
    periodUnit?: string;
    platform?: string;
    rdsInstances?: string[];
    scalingPolicy?: string;
    spotInstancePools?: number;
    spotInstanceRemedy?: boolean;
    spotPriceLimit?: ModifyClusterNodePoolRequestScalingGroupSpotPriceLimit[];
    spotStrategy?: string;
    systemDiskCategory?: string;
    systemDiskPerformanceLevel?: string;
    systemDiskSize?: number;
    tags?: Tag[];
    vswitchIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyClusterNodePoolRequestTeeConfig extends $tea.Model {
    teeEnable?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyNodePoolNodeConfigRequestKubeletConfig extends $tea.Model {
    cpuManagerPolicy?: string;
    eventBurst?: number;
    eventRecordQPS?: number;
    evictionHard?: {
        [key: string]: any;
    };
    evictionSoft?: {
        [key: string]: any;
    };
    evictionSoftGracePeriod?: {
        [key: string]: any;
    };
    kubeAPIBurst?: number;
    kubeAPIQPS?: number;
    kubeReserved?: {
        [key: string]: any;
    };
    registryBurst?: number;
    registryPullQPS?: number;
    serializeImagePulls?: boolean;
    systemReserved?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyNodePoolNodeConfigRequestRollingPolicy extends $tea.Model {
    maxParallelism?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterRequestTags extends $tea.Model {
    key?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterRequestTaints extends $tea.Model {
    effect?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleClusterRequestWorkerDataDisks extends $tea.Model {
    category?: string;
    encrypted?: string;
    size?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ScaleOutClusterRequestWorkerDataDisks extends $tea.Model {
    autoSnapshotPolicyId?: string;
    category?: string;
    encrypted?: string;
    size?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnInstallClusterAddonsRequestAddons extends $tea.Model {
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeClusterAddonsRequestBody extends $tea.Model {
    componentName?: string;
    config?: string;
    nextVersion?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    attachInstances(ClusterId: string, request: AttachInstancesRequest): Promise<AttachInstancesResponse>;
    attachInstancesWithOptions(ClusterId: string, request: AttachInstancesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<AttachInstancesResponse>;
    cancelClusterUpgrade(ClusterId: string): Promise<CancelClusterUpgradeResponse>;
    cancelClusterUpgradeWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CancelClusterUpgradeResponse>;
    cancelComponentUpgrade(clusterId: string, componentId: string): Promise<CancelComponentUpgradeResponse>;
    cancelComponentUpgradeWithOptions(clusterId: string, componentId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CancelComponentUpgradeResponse>;
    cancelTask(taskId: string): Promise<CancelTaskResponse>;
    cancelTaskWithOptions(taskId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CancelTaskResponse>;
    cancelWorkflow(workflowName: string, request: CancelWorkflowRequest): Promise<CancelWorkflowResponse>;
    cancelWorkflowWithOptions(workflowName: string, request: CancelWorkflowRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CancelWorkflowResponse>;
    createAutoscalingConfig(ClusterId: string, request: CreateAutoscalingConfigRequest): Promise<CreateAutoscalingConfigResponse>;
    createAutoscalingConfigWithOptions(ClusterId: string, request: CreateAutoscalingConfigRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CreateAutoscalingConfigResponse>;
    createCluster(request: CreateClusterRequest): Promise<CreateClusterResponse>;
    createClusterWithOptions(request: CreateClusterRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CreateClusterResponse>;
    createClusterNodePool(ClusterId: string, request: CreateClusterNodePoolRequest): Promise<CreateClusterNodePoolResponse>;
    createClusterNodePoolWithOptions(ClusterId: string, request: CreateClusterNodePoolRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CreateClusterNodePoolResponse>;
    createEdgeMachine(request: CreateEdgeMachineRequest): Promise<CreateEdgeMachineResponse>;
    createEdgeMachineWithOptions(request: CreateEdgeMachineRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CreateEdgeMachineResponse>;
    createKubernetesTrigger(request: CreateKubernetesTriggerRequest): Promise<CreateKubernetesTriggerResponse>;
    createKubernetesTriggerWithOptions(request: CreateKubernetesTriggerRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CreateKubernetesTriggerResponse>;
    createTemplate(request: CreateTemplateRequest): Promise<CreateTemplateResponse>;
    createTemplateWithOptions(request: CreateTemplateRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CreateTemplateResponse>;
    createTrigger(clusterId: string, request: CreateTriggerRequest): Promise<CreateTriggerResponse>;
    createTriggerWithOptions(clusterId: string, request: CreateTriggerRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<CreateTriggerResponse>;
    deleteAlertContact(): Promise<DeleteAlertContactResponse>;
    deleteAlertContactWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteAlertContactResponse>;
    deleteAlertContactGroup(): Promise<DeleteAlertContactGroupResponse>;
    deleteAlertContactGroupWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteAlertContactGroupResponse>;
    deleteCluster(ClusterId: string, request: DeleteClusterRequest): Promise<DeleteClusterResponse>;
    deleteClusterWithOptions(ClusterId: string, tmpReq: DeleteClusterRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteClusterResponse>;
    deleteClusterNodepool(ClusterId: string, NodepoolId: string, request: DeleteClusterNodepoolRequest): Promise<DeleteClusterNodepoolResponse>;
    deleteClusterNodepoolWithOptions(ClusterId: string, NodepoolId: string, request: DeleteClusterNodepoolRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteClusterNodepoolResponse>;
    deleteClusterNodes(ClusterId: string, request: DeleteClusterNodesRequest): Promise<DeleteClusterNodesResponse>;
    deleteClusterNodesWithOptions(ClusterId: string, request: DeleteClusterNodesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteClusterNodesResponse>;
    deleteEdgeMachine(edgeMachineid: string, request: DeleteEdgeMachineRequest): Promise<DeleteEdgeMachineResponse>;
    deleteEdgeMachineWithOptions(edgeMachineid: string, request: DeleteEdgeMachineRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteEdgeMachineResponse>;
    deleteKubernetesTrigger(Id: string): Promise<DeleteKubernetesTriggerResponse>;
    deleteKubernetesTriggerWithOptions(Id: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteKubernetesTriggerResponse>;
    deletePolicyInstance(clusterId: string, policyName: string, request: DeletePolicyInstanceRequest): Promise<DeletePolicyInstanceResponse>;
    deletePolicyInstanceWithOptions(clusterId: string, policyName: string, request: DeletePolicyInstanceRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeletePolicyInstanceResponse>;
    deleteTemplate(TemplateId: string): Promise<DeleteTemplateResponse>;
    deleteTemplateWithOptions(TemplateId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteTemplateResponse>;
    deleteTrigger(clusterId: string, Id: string): Promise<DeleteTriggerResponse>;
    deleteTriggerWithOptions(clusterId: string, Id: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeleteTriggerResponse>;
    deployPolicyInstance(clusterId: string, policyName: string, request: DeployPolicyInstanceRequest): Promise<DeployPolicyInstanceResponse>;
    deployPolicyInstanceWithOptions(clusterId: string, policyName: string, request: DeployPolicyInstanceRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeployPolicyInstanceResponse>;
    descirbeWorkflow(workflowName: string): Promise<DescirbeWorkflowResponse>;
    descirbeWorkflowWithOptions(workflowName: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescirbeWorkflowResponse>;
    describeAddons(request: DescribeAddonsRequest): Promise<DescribeAddonsResponse>;
    describeAddonsWithOptions(request: DescribeAddonsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeAddonsResponse>;
    describeClusterAddonMetadata(clusterId: string, componentId: string, version: string): Promise<DescribeClusterAddonMetadataResponse>;
    describeClusterAddonMetadataWithOptions(clusterId: string, componentId: string, version: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterAddonMetadataResponse>;
    describeClusterAddonUpgradeStatus(ClusterId: string, ComponentId: string): Promise<DescribeClusterAddonUpgradeStatusResponse>;
    describeClusterAddonUpgradeStatusWithOptions(ClusterId: string, ComponentId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterAddonUpgradeStatusResponse>;
    describeClusterAddonsUpgradeStatus(ClusterId: string, request: DescribeClusterAddonsUpgradeStatusRequest): Promise<DescribeClusterAddonsUpgradeStatusResponse>;
    describeClusterAddonsUpgradeStatusWithOptions(ClusterId: string, tmpReq: DescribeClusterAddonsUpgradeStatusRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterAddonsUpgradeStatusResponse>;
    describeClusterAddonsVersion(ClusterId: string): Promise<DescribeClusterAddonsVersionResponse>;
    describeClusterAddonsVersionWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterAddonsVersionResponse>;
    describeClusterAttachScripts(ClusterId: string, request: DescribeClusterAttachScriptsRequest): Promise<DescribeClusterAttachScriptsResponse>;
    describeClusterAttachScriptsWithOptions(ClusterId: string, request: DescribeClusterAttachScriptsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterAttachScriptsResponse>;
    describeClusterDetail(ClusterId: string): Promise<DescribeClusterDetailResponse>;
    describeClusterDetailWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterDetailResponse>;
    describeClusterEvents(ClusterId: string, request: DescribeClusterEventsRequest): Promise<DescribeClusterEventsResponse>;
    describeClusterEventsWithOptions(ClusterId: string, request: DescribeClusterEventsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterEventsResponse>;
    describeClusterLogs(ClusterId: string): Promise<DescribeClusterLogsResponse>;
    describeClusterLogsWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterLogsResponse>;
    describeClusterNodePoolDetail(ClusterId: string, NodepoolId: string): Promise<DescribeClusterNodePoolDetailResponse>;
    describeClusterNodePoolDetailWithOptions(ClusterId: string, NodepoolId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterNodePoolDetailResponse>;
    describeClusterNodePools(ClusterId: string): Promise<DescribeClusterNodePoolsResponse>;
    describeClusterNodePoolsWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterNodePoolsResponse>;
    describeClusterNodes(ClusterId: string, request: DescribeClusterNodesRequest): Promise<DescribeClusterNodesResponse>;
    describeClusterNodesWithOptions(ClusterId: string, request: DescribeClusterNodesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterNodesResponse>;
    describeClusterResources(ClusterId: string): Promise<DescribeClusterResourcesResponse>;
    describeClusterResourcesWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterResourcesResponse>;
    describeClusterTasks(clusterId: string): Promise<DescribeClusterTasksResponse>;
    describeClusterTasksWithOptions(clusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterTasksResponse>;
    describeClusterUserKubeconfig(ClusterId: string, request: DescribeClusterUserKubeconfigRequest): Promise<DescribeClusterUserKubeconfigResponse>;
    describeClusterUserKubeconfigWithOptions(ClusterId: string, request: DescribeClusterUserKubeconfigRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterUserKubeconfigResponse>;
    describeClusterV2UserKubeconfig(ClusterId: string, request: DescribeClusterV2UserKubeconfigRequest): Promise<DescribeClusterV2UserKubeconfigResponse>;
    describeClusterV2UserKubeconfigWithOptions(ClusterId: string, request: DescribeClusterV2UserKubeconfigRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClusterV2UserKubeconfigResponse>;
    describeClusters(request: DescribeClustersRequest): Promise<DescribeClustersResponse>;
    describeClustersWithOptions(request: DescribeClustersRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClustersResponse>;
    describeClustersV1(request: DescribeClustersV1Request): Promise<DescribeClustersV1Response>;
    describeClustersV1WithOptions(request: DescribeClustersV1Request, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeClustersV1Response>;
    describeEdgeMachineActiveProcess(edgeMachineid: string): Promise<DescribeEdgeMachineActiveProcessResponse>;
    describeEdgeMachineActiveProcessWithOptions(edgeMachineid: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeEdgeMachineActiveProcessResponse>;
    describeEdgeMachineModels(): Promise<DescribeEdgeMachineModelsResponse>;
    describeEdgeMachineModelsWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeEdgeMachineModelsResponse>;
    describeEdgeMachineTunnelConfigDetail(edgeMachineid: string): Promise<DescribeEdgeMachineTunnelConfigDetailResponse>;
    describeEdgeMachineTunnelConfigDetailWithOptions(edgeMachineid: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeEdgeMachineTunnelConfigDetailResponse>;
    describeEdgeMachines(request: DescribeEdgeMachinesRequest): Promise<DescribeEdgeMachinesResponse>;
    describeEdgeMachinesWithOptions(request: DescribeEdgeMachinesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeEdgeMachinesResponse>;
    describeEvents(request: DescribeEventsRequest): Promise<DescribeEventsResponse>;
    describeEventsWithOptions(request: DescribeEventsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeEventsResponse>;
    describeExternalAgent(ClusterId: string, request: DescribeExternalAgentRequest): Promise<DescribeExternalAgentResponse>;
    describeExternalAgentWithOptions(ClusterId: string, request: DescribeExternalAgentRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeExternalAgentResponse>;
    describeKubernetesVersionMetadata(request: DescribeKubernetesVersionMetadataRequest): Promise<DescribeKubernetesVersionMetadataResponse>;
    describeKubernetesVersionMetadataWithOptions(request: DescribeKubernetesVersionMetadataRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeKubernetesVersionMetadataResponse>;
    describeNodePoolVuls(clusterId: string, nodepoolId: string): Promise<DescribeNodePoolVulsResponse>;
    describeNodePoolVulsWithOptions(clusterId: string, nodepoolId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeNodePoolVulsResponse>;
    describePolicies(): Promise<DescribePoliciesResponse>;
    describePoliciesWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribePoliciesResponse>;
    describePolicyDetails(policyName: string): Promise<DescribePolicyDetailsResponse>;
    describePolicyDetailsWithOptions(policyName: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribePolicyDetailsResponse>;
    describePolicyGovernanceInCluster(clusterId: string): Promise<DescribePolicyGovernanceInClusterResponse>;
    describePolicyGovernanceInClusterWithOptions(clusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribePolicyGovernanceInClusterResponse>;
    describePolicyInstances(clusterId: string, request: DescribePolicyInstancesRequest): Promise<DescribePolicyInstancesResponse>;
    describePolicyInstancesWithOptions(clusterId: string, request: DescribePolicyInstancesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribePolicyInstancesResponse>;
    describePolicyInstancesStatus(clusterId: string): Promise<DescribePolicyInstancesStatusResponse>;
    describePolicyInstancesStatusWithOptions(clusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribePolicyInstancesStatusResponse>;
    describeTaskInfo(taskId: string): Promise<DescribeTaskInfoResponse>;
    describeTaskInfoWithOptions(taskId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeTaskInfoResponse>;
    describeTemplateAttribute(TemplateId: string, request: DescribeTemplateAttributeRequest): Promise<DescribeTemplateAttributeResponse>;
    describeTemplateAttributeWithOptions(TemplateId: string, request: DescribeTemplateAttributeRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeTemplateAttributeResponse>;
    describeTemplates(request: DescribeTemplatesRequest): Promise<DescribeTemplatesResponse>;
    describeTemplatesWithOptions(request: DescribeTemplatesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeTemplatesResponse>;
    describeTrigger(clusterId: string, request: DescribeTriggerRequest): Promise<DescribeTriggerResponse>;
    describeTriggerWithOptions(clusterId: string, request: DescribeTriggerRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeTriggerResponse>;
    describeUserPermission(uid: string): Promise<DescribeUserPermissionResponse>;
    describeUserPermissionWithOptions(uid: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeUserPermissionResponse>;
    describeUserQuota(): Promise<DescribeUserQuotaResponse>;
    describeUserQuotaWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeUserQuotaResponse>;
    describeWorkflows(): Promise<DescribeWorkflowsResponse>;
    describeWorkflowsWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DescribeWorkflowsResponse>;
    edgeClusterAddEdgeMachine(clusterid: string, edgeMachineid: string, request: EdgeClusterAddEdgeMachineRequest): Promise<EdgeClusterAddEdgeMachineResponse>;
    edgeClusterAddEdgeMachineWithOptions(clusterid: string, edgeMachineid: string, request: EdgeClusterAddEdgeMachineRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<EdgeClusterAddEdgeMachineResponse>;
    fixNodePoolVuls(clusterId: string, nodepoolId: string, request: FixNodePoolVulsRequest): Promise<FixNodePoolVulsResponse>;
    fixNodePoolVulsWithOptions(clusterId: string, nodepoolId: string, request: FixNodePoolVulsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<FixNodePoolVulsResponse>;
    getKubernetesTrigger(ClusterId: string, request: GetKubernetesTriggerRequest): Promise<GetKubernetesTriggerResponse>;
    getKubernetesTriggerWithOptions(ClusterId: string, request: GetKubernetesTriggerRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GetKubernetesTriggerResponse>;
    getUpgradeStatus(ClusterId: string): Promise<GetUpgradeStatusResponse>;
    getUpgradeStatusWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GetUpgradeStatusResponse>;
    grantPermissions(uid: string, request: GrantPermissionsRequest): Promise<GrantPermissionsResponse>;
    grantPermissionsWithOptions(uid: string, request: GrantPermissionsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GrantPermissionsResponse>;
    installClusterAddons(ClusterId: string, request: InstallClusterAddonsRequest): Promise<InstallClusterAddonsResponse>;
    installClusterAddonsWithOptions(ClusterId: string, request: InstallClusterAddonsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<InstallClusterAddonsResponse>;
    listTagResources(request: ListTagResourcesRequest): Promise<ListTagResourcesResponse>;
    listTagResourcesWithOptions(tmpReq: ListTagResourcesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ListTagResourcesResponse>;
    migrateCluster(clusterId: string, request: MigrateClusterRequest): Promise<MigrateClusterResponse>;
    migrateClusterWithOptions(clusterId: string, request: MigrateClusterRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<MigrateClusterResponse>;
    modifyCluster(ClusterId: string, request: ModifyClusterRequest): Promise<ModifyClusterResponse>;
    modifyClusterWithOptions(ClusterId: string, request: ModifyClusterRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ModifyClusterResponse>;
    modifyClusterAddon(clusterId: string, componentId: string, request: ModifyClusterAddonRequest): Promise<ModifyClusterAddonResponse>;
    modifyClusterAddonWithOptions(clusterId: string, componentId: string, request: ModifyClusterAddonRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ModifyClusterAddonResponse>;
    modifyClusterConfiguration(ClusterId: string, request: ModifyClusterConfigurationRequest): Promise<ModifyClusterConfigurationResponse>;
    modifyClusterConfigurationWithOptions(ClusterId: string, request: ModifyClusterConfigurationRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ModifyClusterConfigurationResponse>;
    modifyClusterNodePool(ClusterId: string, NodepoolId: string, request: ModifyClusterNodePoolRequest): Promise<ModifyClusterNodePoolResponse>;
    modifyClusterNodePoolWithOptions(ClusterId: string, NodepoolId: string, request: ModifyClusterNodePoolRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ModifyClusterNodePoolResponse>;
    modifyClusterTags(ClusterId: string, request: ModifyClusterTagsRequest): Promise<ModifyClusterTagsResponse>;
    modifyClusterTagsWithOptions(ClusterId: string, request: ModifyClusterTagsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ModifyClusterTagsResponse>;
    modifyNodePoolNodeConfig(ClusterId: string, NodepoolId: string, request: ModifyNodePoolNodeConfigRequest): Promise<ModifyNodePoolNodeConfigResponse>;
    modifyNodePoolNodeConfigWithOptions(ClusterId: string, NodepoolId: string, request: ModifyNodePoolNodeConfigRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ModifyNodePoolNodeConfigResponse>;
    modifyPolicyInstance(clusterId: string, policyName: string, request: ModifyPolicyInstanceRequest): Promise<ModifyPolicyInstanceResponse>;
    modifyPolicyInstanceWithOptions(clusterId: string, policyName: string, request: ModifyPolicyInstanceRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ModifyPolicyInstanceResponse>;
    openAckService(request: OpenAckServiceRequest): Promise<OpenAckServiceResponse>;
    openAckServiceWithOptions(request: OpenAckServiceRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<OpenAckServiceResponse>;
    pauseClusterUpgrade(ClusterId: string): Promise<PauseClusterUpgradeResponse>;
    pauseClusterUpgradeWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<PauseClusterUpgradeResponse>;
    pauseComponentUpgrade(clusterid: string, componentid: string): Promise<PauseComponentUpgradeResponse>;
    pauseComponentUpgradeWithOptions(clusterid: string, componentid: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<PauseComponentUpgradeResponse>;
    pauseTask(taskId: string): Promise<PauseTaskResponse>;
    pauseTaskWithOptions(taskId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<PauseTaskResponse>;
    removeClusterNodes(ClusterId: string, request: RemoveClusterNodesRequest): Promise<RemoveClusterNodesResponse>;
    removeClusterNodesWithOptions(ClusterId: string, request: RemoveClusterNodesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<RemoveClusterNodesResponse>;
    removeNodePoolNodes(ClusterId: string, NodepoolId: string, request: RemoveNodePoolNodesRequest): Promise<RemoveNodePoolNodesResponse>;
    removeNodePoolNodesWithOptions(ClusterId: string, NodepoolId: string, tmpReq: RemoveNodePoolNodesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<RemoveNodePoolNodesResponse>;
    removeWorkflow(workflowName: string): Promise<RemoveWorkflowResponse>;
    removeWorkflowWithOptions(workflowName: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<RemoveWorkflowResponse>;
    repairClusterNodePool(clusterId: string, nodepoolId: string, request: RepairClusterNodePoolRequest): Promise<RepairClusterNodePoolResponse>;
    repairClusterNodePoolWithOptions(clusterId: string, nodepoolId: string, request: RepairClusterNodePoolRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<RepairClusterNodePoolResponse>;
    resumeComponentUpgrade(clusterid: string, componentid: string): Promise<ResumeComponentUpgradeResponse>;
    resumeComponentUpgradeWithOptions(clusterid: string, componentid: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ResumeComponentUpgradeResponse>;
    resumeTask(taskId: string): Promise<ResumeTaskResponse>;
    resumeTaskWithOptions(taskId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ResumeTaskResponse>;
    resumeUpgradeCluster(ClusterId: string): Promise<ResumeUpgradeClusterResponse>;
    resumeUpgradeClusterWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ResumeUpgradeClusterResponse>;
    scaleCluster(ClusterId: string, request: ScaleClusterRequest): Promise<ScaleClusterResponse>;
    scaleClusterWithOptions(ClusterId: string, request: ScaleClusterRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ScaleClusterResponse>;
    scaleClusterNodePool(ClusterId: string, NodepoolId: string, request: ScaleClusterNodePoolRequest): Promise<ScaleClusterNodePoolResponse>;
    scaleClusterNodePoolWithOptions(ClusterId: string, NodepoolId: string, request: ScaleClusterNodePoolRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ScaleClusterNodePoolResponse>;
    scaleOutCluster(ClusterId: string, request: ScaleOutClusterRequest): Promise<ScaleOutClusterResponse>;
    scaleOutClusterWithOptions(ClusterId: string, request: ScaleOutClusterRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<ScaleOutClusterResponse>;
    startWorkflow(request: StartWorkflowRequest): Promise<StartWorkflowResponse>;
    startWorkflowWithOptions(request: StartWorkflowRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<StartWorkflowResponse>;
    tagResources(request: TagResourcesRequest): Promise<TagResourcesResponse>;
    tagResourcesWithOptions(request: TagResourcesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<TagResourcesResponse>;
    unInstallClusterAddons(ClusterId: string, request: UnInstallClusterAddonsRequest): Promise<UnInstallClusterAddonsResponse>;
    unInstallClusterAddonsWithOptions(ClusterId: string, request: UnInstallClusterAddonsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UnInstallClusterAddonsResponse>;
    untagResources(request: UntagResourcesRequest): Promise<UntagResourcesResponse>;
    untagResourcesWithOptions(request: UntagResourcesRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UntagResourcesResponse>;
    updateContactGroupForAlert(ClusterId: string): Promise<UpdateContactGroupForAlertResponse>;
    updateContactGroupForAlertWithOptions(ClusterId: string, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UpdateContactGroupForAlertResponse>;
    updateK8sClusterUserConfigExpire(ClusterId: string, request: UpdateK8sClusterUserConfigExpireRequest): Promise<UpdateK8sClusterUserConfigExpireResponse>;
    updateK8sClusterUserConfigExpireWithOptions(ClusterId: string, request: UpdateK8sClusterUserConfigExpireRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UpdateK8sClusterUserConfigExpireResponse>;
    updateTemplate(TemplateId: string, request: UpdateTemplateRequest): Promise<UpdateTemplateResponse>;
    updateTemplateWithOptions(TemplateId: string, request: UpdateTemplateRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UpdateTemplateResponse>;
    upgradeCluster(ClusterId: string, request: UpgradeClusterRequest): Promise<UpgradeClusterResponse>;
    upgradeClusterWithOptions(ClusterId: string, request: UpgradeClusterRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UpgradeClusterResponse>;
    upgradeClusterAddons(ClusterId: string, request: UpgradeClusterAddonsRequest): Promise<UpgradeClusterAddonsResponse>;
    upgradeClusterAddonsWithOptions(ClusterId: string, request: UpgradeClusterAddonsRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UpgradeClusterAddonsResponse>;
    upgradeClusterNodepool(ClusterId: string, NodepoolId: string, request: UpgradeClusterNodepoolRequest): Promise<UpgradeClusterNodepoolResponse>;
    upgradeClusterNodepoolWithOptions(ClusterId: string, NodepoolId: string, request: UpgradeClusterNodepoolRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<UpgradeClusterNodepoolResponse>;
}
